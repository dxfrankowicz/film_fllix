import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get commonCancel => "Cancel";
  String get commonClose => "Close";
  String get commonDelete => "Delete";
  String get commonEdit => "Edit";
  String get commonLastActiveAt => "Last active at";
  String get commonLastLoggedAt => "Last logged at";
  String get commonNo => "No";
  String get commonOk => "Ok";
  String get commonReturn => "Return";
  String get commonSave => "Save";
  String get commonSearchWriteMin1Letter => "Enter at least one letter";
  String get commonShowLess => "Show less";
  String get commonShowMore => "Show more";
  String get commonYes => "Yes";
  String get dialogErrorTitle => "Error";
  String get dialogInfoTitle => "Info";
  String get drawerComments => "Comments";
  String get drawerExit => "Exit";
  String get drawerLogOut => "Log out";
  String get drawerLogin => "Log in";
  String get drawerMovies => "Movies";
  String get drawerRentals => "Rentals";
  String get drawerSignUp => "Sign up";
  String get errorCustomPageOops => "Oops..";
  String get errorCustomPageUnexpectedErrorDetails => "Show error details";
  String get errorCustomPageUnexpectedErrorOccurred => "An unexpected error has occurred. \nPlease try again or contact us.";
  String get errorCustomPageUnexpectedSendErrorDetails => "Send us error report";
  String get login => "Login";
  String get loginEmptyLogin => "Enter login";
  String get loginEmptyLoginAndPassword => "Enter login and password";
  String get loginEmptyPassword => "Enter password";
  String get loginForgotPassword => "Forgot your password?";
  String get loginLoggedOutSuccessfully => "Logged out successfully";
  String get loginLoggedSuccessfully => "Logged in successfully";
  String get loginLogging => "Logging";
  String get loginLogin => "Login or e-mail";
  String get loginPassword => "Password";
  String get loginRegister => "Register";
  String get loginResetPassword => "Reset password!";
  String get loginWrongPassword => "Invalid login or password";
  String get movieDetailsAddComment => "Add comment";
  String get movieDetailsAddingComment => "Sending comment...";
  String get movieDetailsCommentAdded => "Comment has been added";
  String get movieDetailsCommentHint => "Enter comment...";
  String get movieDetailsCommentNotAdded => "Comment has not been added";
  String get movieDetailsNoComments => "No comments";
  String get movieDetailsRentVideo => "Rent movie";
  String get movieRent => "Rent movie";
  String get movieRented => "Movie has been rented successfully";
  String get moviesRented => "Rented";
  String get registrationFillUpData => "Fill up the following data:";
  String get registrationName => "Name";
  String get registrationSignUpAlreadyExist => "User with given username already exists";
  String get registrationSigningUp => "Signing up user";
  String get registrationSuccessfully => "You have signed up successfully. You can now log in";
  String get registrationSurname => "Surname";
}

class $pl_PL extends S {
  const $pl_PL();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get commonShowMore => "Pokaż więcej";
  @override
  String get commonLastActiveAt => "Ostatnia aktywność";
  @override
  String get errorCustomPageUnexpectedSendErrorDetails => "Wyślij nam raport o błędzie";
  @override
  String get drawerLogOut => "Wyloguj się";
  @override
  String get commonEdit => "Edytuj";
  @override
  String get loginWrongPassword => "Błędne hasło lub login";
  @override
  String get commonYes => "Tak";
  @override
  String get commonNo => "Nie";
  @override
  String get commonSave => "Zapisz";
  @override
  String get dialogErrorTitle => "Błąd";
  @override
  String get registrationSigningUp => "Rejestrowanie użytkownika";
  @override
  String get moviesRented => "Wypożyczony";
  @override
  String get loginPassword => "Hasło";
  @override
  String get movieDetailsCommentAdded => "Komentarz został dodany";
  @override
  String get commonSearchWriteMin1Letter => "Wprowadź co najmniej jedną literę";
  @override
  String get registrationSignUpAlreadyExist => "Użytkownik o danym loginie już istnieje";
  @override
  String get drawerLogin => "Zaloguj się";
  @override
  String get movieDetailsAddComment => "Dodaj komentarz";
  @override
  String get errorCustomPageUnexpectedErrorOccurred => "Wystąpił nieoczekiwany błąd. \nProszę spróbować ponownie lub skontaktuj się z nami";
  @override
  String get loginRegister => "Rejestracja";
  @override
  String get registrationSurname => "Nazwisko";
  @override
  String get drawerRentals => "Wypożyczenia";
  @override
  String get loginEmptyPassword => "Podaj hasło";
  @override
  String get loginLogging => "Logowanie";
  @override
  String get movieDetailsNoComments => "Brak komentarzy";
  @override
  String get movieDetailsCommentHint => "Wpisz komentarz...";
  @override
  String get commonOk => "Ok";
  @override
  String get commonShowLess => "Pokaż mniej";
  @override
  String get errorCustomPageUnexpectedErrorDetails => "Pokaż szczegóły błędu";
  @override
  String get registrationFillUpData => "Uzupełnij następujące dane:";
  @override
  String get loginLogin => "Login lub e-mail";
  @override
  String get registrationName => "Imię";
  @override
  String get login => "Login";
  @override
  String get movieRented => "Film został wypożyczony poprawnie";
  @override
  String get loginForgotPassword => "Zapomniałeś swoje hasło?";
  @override
  String get movieRent => "Wypożycz film";
  @override
  String get loginEmptyLogin => "Podaj login";
  @override
  String get movieDetailsAddingComment => "Wysyłanie komentarza...";
  @override
  String get dialogInfoTitle => "Info";
  @override
  String get commonDelete => "Usuñ";
  @override
  String get commonLastLoggedAt => "Ostatnie logowanie";
  @override
  String get drawerSignUp => "Zarejestruj się";
  @override
  String get drawerMovies => "Filmy";
  @override
  String get registrationSuccessfully => "Zarejestrowałeś się poprawnie. Możesz się zalogować";
  @override
  String get loginLoggedSuccessfully => "Zalogowano pomyślnie";
  @override
  String get drawerExit => "Wyjdź";
  @override
  String get movieDetailsCommentNotAdded => "Komentarz nie został dodany";
  @override
  String get loginLoggedOutSuccessfully => "Wylogowano pomyślnie";
  @override
  String get loginEmptyLoginAndPassword => "Podaj login i hasło";
  @override
  String get commonClose => "Zamknij";
  @override
  String get commonCancel => "Anuluj";
  @override
  String get errorCustomPageOops => "Ups..";
  @override
  String get loginResetPassword => "Resetuj hasło!";
  @override
  String get movieDetailsRentVideo => "Wypożycz film";
  @override
  String get drawerComments => "Komentarze";
  @override
  String get commonReturn => "Powrót";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("pl", "PL"),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported);
    };
  }

  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported) {
    if (locale == null || !isSupported(locale)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "pl_PL":
          return SynchronousFuture<S>(const $pl_PL());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) =>
    locale != null && supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
